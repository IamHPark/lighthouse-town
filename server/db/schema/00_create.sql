DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS chats CASCADE;
DROP TABLE IF EXISTS rooms CASCADE;
DROP TABLE IF EXISTS favorites CASCADE;
DROP TABLE IF EXISTS avatars CASCADE;
DROP TABLE IF EXISTS languages CASCADE;
DROP TABLE IF EXISTS messages CASCADE;

CREATE TABLE users (
  id SERIAL PRIMARY KEY NOT NULL,
  username VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  avatar_id INTEGER REFERENCES avatars(id) ON DELETE CASCADE NOT NULL,
  language_id INTEGER REFERENCES languages(id) ON DELETE CASCADE
);
-- room = all private
CREATE TABLE rooms (
  id SERIAL PRIMARY KEY NOT NULL,
  permission BOOLEAN DEFAULT FALSE NOT NULL
);

CREATE TABLE avatars (
  id SERIAL PRIMARY KEY NOT NULL,
  avatar_name INTEGER VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE languages (
  id SERIAL PRIMARY KEY NOT NULL,
  lanbuage_name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE messages (
  id SERIAL PRIMARY KEY NOT NULL,
  message VARCHAR(255) NOT NULL,
  sender_id INTEGER REFERENCES users(id) ON DELETE CASCADE  NOT NULL,
  room_id INTEGER REFERENCES rooms(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP DEFAULT NOW() NOT NULL,
  -- recipient_id INTEGER REFERENCES NOT NULL ON DELETE CASCADE,
);

CREATE TABLE favorites (
  id SERIAL PRIMARY KEY NOT NULL,
  followed INTEGER REFERENCES users(id) ON DELETE CASCADE NOT NULL,
  following INTEGER REFERENCES users(id) ON DELETE CASCADE NOT NULL,
);

CREATE TABLE room_members (
  id SERIAL PRIMARY KEY NOT NULL,
  uset_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  rooms_id INTEGER REFERENCES rooms(id) ON DELETE CASCADE
);

CREATE TABLE user_language (
  id SERIAL PRIMARY KEY NOT NULL,
  uset_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  language_id INTEGER REFERENCES rooms(id) ON DELETE CASCADE
);